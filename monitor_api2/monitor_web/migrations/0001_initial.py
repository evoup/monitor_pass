# Generated by Django 2.1.9 on 2019-09-13 14:13

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django_unixdatetimefield.fields
import web.common.db_fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Alert',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('time', models.DateTimeField(auto_now_add=True)),
                ('subject', models.CharField(default='', max_length=255, verbose_name='告警正文')),
            ],
            options={
                'verbose_name_plural': '告警表',
                'db_table': 'alert',
            },
        ),
        migrations.CreateModel(
            name='Asset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('host_name', models.CharField(max_length=256, null=True)),
                ('network_device_name', models.CharField(max_length=256, null=True)),
                ('device_type_id', models.IntegerField(choices=[(1, '服务器'), (2, '交换机'), (3, '防火墙')], default=1)),
                ('device_status_id', models.IntegerField(choices=[(1, '上架'), (2, '在线'), (3, '离线'), (4, '下架')], default=1)),
                ('cabinet_num', models.CharField(blank=True, max_length=30, null=True, verbose_name='机柜号')),
                ('cabinet_order', models.CharField(blank=True, max_length=30, null=True, verbose_name='机柜中序号')),
                ('latest_date', models.DateField(null=True)),
                ('create_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': '资产表',
                'db_table': 'asset',
            },
        ),
        migrations.CreateModel(
            name='AssetErrorLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=16)),
                ('content', models.TextField()),
                ('create_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': '错误日志表',
                'db_table': 'assert_error_log',
            },
        ),
        migrations.CreateModel(
            name='AssetRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(null=True)),
                ('create_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': '资产记录表',
                'db_table': 'addset_record',
            },
        ),
        migrations.CreateModel(
            name='BusinessUnit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True, verbose_name='业务线')),
            ],
            options={
                'verbose_name_plural': '业务线表',
                'db_table': 'business_unit',
            },
        ),
        migrations.CreateModel(
            name='DashBoard',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'verbose_name_plural': '首页仪表盘表',
                'db_table': 'dashboard',
            },
        ),
        migrations.CreateModel(
            name='DataCollector',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=40, verbose_name='数据收集器名')),
                ('ip', models.GenericIPAddressField(verbose_name='IP地址')),
                ('port', models.IntegerField(verbose_name='端口号')),
            ],
            options={
                'verbose_name_plural': '数据收集器表',
                'db_table': 'data_collector',
            },
        ),
        migrations.CreateModel(
            name='Diagram',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(default='', max_length=256, verbose_name='图表名称')),
                ('width', models.CharField(default='100%', max_length=40, verbose_name='宽度')),
                ('height', models.CharField(default='230', max_length=40, verbose_name='高度')),
            ],
            options={
                'verbose_name_plural': '图表表',
                'db_table': 'diagram',
            },
        ),
        migrations.CreateModel(
            name='DiagramItem',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'verbose_name_plural': '图表项表',
                'db_table': 'diagram_item',
            },
        ),
        migrations.CreateModel(
            name='Disk',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slot', models.CharField(max_length=8, verbose_name='插槽位')),
                ('model', models.CharField(max_length=32, verbose_name='磁盘型号')),
                ('capacity', models.FloatField(verbose_name='磁盘容量GB')),
                ('pd_type', models.CharField(max_length=32, verbose_name='磁盘类型')),
            ],
            options={
                'verbose_name_plural': '硬盘表',
                'db_table': 'disk',
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('event', models.CharField(max_length=200, verbose_name='监控事件')),
                ('time', django_unixdatetimefield.fields.UnixDateTimeField(verbose_name='发生时间')),
                ('type', web.common.db_fields.TinyIntegerField(choices=[(0, 'normal'), (1, 'caution'), (2, 'warning')], default=0, verbose_name='事件类型')),
                ('acknowledged', models.BooleanField(default=False, null=True)),
                ('acknowledge', models.CharField(default='', max_length=200, null=True, verbose_name='确认文字')),
                ('target_id', models.IntegerField(verbose_name='事件对象id')),
            ],
            options={
                'verbose_name_plural': '监控事件表',
                'db_table': 'event',
            },
        ),
        migrations.CreateModel(
            name='Function',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(default='', max_length=10, verbose_name='函数')),
                ('parameter', models.CharField(default='', max_length=10, verbose_name='参数')),
            ],
            options={
                'verbose_name_plural': '函数表',
                'db_table': 'function',
            },
        ),
        migrations.CreateModel(
            name='GeneralConfig',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grafana_api_key', models.CharField(blank=True, max_length=255, null=True, verbose_name='grafana的api key')),
                ('send_warn', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name_plural': '常规设置表',
                'db_table': 'general_config',
            },
        ),
        migrations.CreateModel(
            name='GrafanaDashboard',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('dashboard_uid', models.CharField(default='', max_length=100, verbose_name='仪表盘uid')),
                ('device_id', models.IntegerField(null=True, verbose_name='服务器或网络设备的id')),
                ('device_type', models.IntegerField(choices=[(1, '服务器'), (2, '交换机'), (3, '防火墙')], default=1)),
            ],
            options={
                'verbose_name_plural': 'Grafana仪表盘表',
                'db_table': 'grafana_dashboard',
            },
        ),
        migrations.CreateModel(
            name='IDC',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=32, verbose_name='机房')),
                ('floor', models.IntegerField(null=True, verbose_name='楼层')),
                ('desc', models.CharField(default='', max_length=256, null=True, verbose_name='备注')),
            ],
            options={
                'verbose_name_plural': '机房表',
                'db_table': 'idc',
            },
        ),
        migrations.CreateModel(
            name='Memory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slot', models.CharField(max_length=32, verbose_name='插槽位')),
                ('manufacturer', models.CharField(blank=True, max_length=32, null=True, verbose_name='制造商')),
                ('model', models.CharField(max_length=64, verbose_name='型号')),
                ('capacity', models.FloatField(blank=True, null=True, verbose_name='容量')),
                ('sn', models.CharField(blank=True, max_length=64, null=True, verbose_name='内存SN号')),
                ('speed', models.CharField(blank=True, max_length=16, null=True, verbose_name='速度')),
            ],
            options={
                'verbose_name_plural': '内存表',
                'db_table': 'memory',
            },
        ),
        migrations.CreateModel(
            name='MonitorItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40, verbose_name='监控项名')),
                ('data_type', web.common.db_fields.TinyIntegerField(choices=[(0, 'agent'), (1, 'SNMP'), (2, 'JMX')], default=0, verbose_name='数据类型')),
                ('delay', models.IntegerField(default=1, verbose_name='轮询间隔秒数')),
                ('desc', models.CharField(default='', max_length=512, verbose_name='描述')),
                ('error', models.CharField(default='', max_length=128, verbose_name='错误')),
                ('key', models.CharField(default='', max_length=128, verbose_name='opentsdb指标名')),
                ('multiplier', models.FloatField(default=1.0, verbose_name='自定义乘子')),
                ('unit', models.CharField(default='', max_length=12, verbose_name='单位')),
                ('host_id', models.IntegerField(verbose_name='对应主机id')),
                ('template_id', models.IntegerField(verbose_name='对应模板id')),
                ('delta', models.IntegerField(default='0', editable=False, verbose_name='增量类型')),
                ('item_copy_from', models.IntegerField(default='0', editable=False, null=True, verbose_name='监控项复制自')),
            ],
            options={
                'verbose_name_plural': '监控项表',
                'db_table': 'item',
            },
        ),
        migrations.CreateModel(
            name='MonitorSet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40, verbose_name='监控集名')),
            ],
            options={
                'verbose_name_plural': '监控集表',
                'db_table': 'set',
            },
        ),
        migrations.CreateModel(
            name='NetworkDevice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('management_ip', models.CharField(blank=True, max_length=64, null=True, verbose_name='管理IP')),
                ('vlan_ip', models.CharField(blank=True, max_length=64, null=True, verbose_name='VlanIP')),
                ('intranet_ip', models.CharField(blank=True, max_length=128, null=True, verbose_name='内网IP')),
                ('sn', models.CharField(max_length=64, unique=True, verbose_name='SN号')),
                ('manufacture', models.CharField(blank=True, max_length=128, null=True, verbose_name='制造商')),
                ('model', models.CharField(blank=True, max_length=128, null=True, verbose_name='型号')),
                ('port_num', models.SmallIntegerField(blank=True, null=True, verbose_name='端口个数')),
                ('device_detail', models.CharField(blank=True, max_length=255, null=True, verbose_name='设置详细配置')),
                ('asset', models.OneToOneField(default='', editable=False, on_delete=django.db.models.deletion.CASCADE, to='monitor_web.Asset')),
            ],
            options={
                'verbose_name_plural': '网络设备',
                'db_table': 'network_device',
            },
        ),
        migrations.CreateModel(
            name='NIC',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='网卡名称')),
                ('hwaddr', models.CharField(max_length=64, verbose_name='网卡mac地址')),
                ('netmask', models.CharField(max_length=64)),
                ('ipaddrs', models.CharField(max_length=256, verbose_name='ip地址')),
                ('up', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name_plural': '网卡表',
                'db_table': 'nic',
            },
        ),
        migrations.CreateModel(
            name='NotificationMode',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('type', models.IntegerField(choices=[(1, '邮件'), (2, '企业微信')], default=1)),
                ('name', models.CharField(default='', max_length=20, verbose_name='名称')),
                ('smtp_server', models.CharField(default='', max_length=255, null=True, verbose_name='smtp服务器')),
                ('smtp_domain', models.CharField(default='', max_length=255, null=True, verbose_name='smtp域')),
                ('smtp_port', models.IntegerField(null=True, verbose_name='smtp端口')),
                ('username', models.CharField(default='', max_length=255, null=True, verbose_name='用户名')),
                ('passwd', models.CharField(default='', max_length=255, null=True, verbose_name='密码')),
                ('wechat_agent_id', models.CharField(default='', max_length=255, null=True, verbose_name='企业微信agent id')),
                ('wechat_corp_id', models.CharField(default='', max_length=255, null=True, verbose_name='企业微信corp id')),
                ('wechat_secret', models.CharField(default='', max_length=255, null=True, verbose_name='企业微信secret')),
                ('enabled', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name_plural': '告警通知方式设置',
                'db_table': 'notification_mode',
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('telephone', models.CharField(blank=True, max_length=32, null=True, verbose_name='座机')),
                ('mobile', models.CharField(blank=True, max_length=32, null=True, verbose_name='手机')),
                ('desc', models.CharField(blank=True, max_length=255, null=True, verbose_name='描述')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': '用户信息表',
                'db_table': 'user_profile',
            },
        ),
        migrations.CreateModel(
            name='RelationUserItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.BooleanField(default=True)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='monitor_web.MonitorItem')),
            ],
            options={
                'verbose_name_plural': '用户监控项关系表',
                'db_table': 'r_user_item',
            },
        ),
        migrations.CreateModel(
            name='Server',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=40, verbose_name='服务器主机名')),
                ('ip', models.CharField(max_length=20, null=True, verbose_name='IP地址')),
                ('status', models.IntegerField(choices=[(0, '宕机'), (1, '在线'), (2, '不监控'), (3, '状态未知')], default=0)),
                ('hostname', models.CharField(max_length=128, null=True, unique=True)),
                ('sn', models.CharField(db_index=True, default='', max_length=64, null=True, verbose_name='SN号')),
                ('manufacturer', models.CharField(blank=True, max_length=64, null=True, verbose_name='制造商')),
                ('model', models.CharField(blank=True, max_length=64, null=True, verbose_name='型号')),
                ('manage_ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='管理IP')),
                ('os_platform', models.CharField(blank=True, max_length=16, null=True, verbose_name='系统')),
                ('os_version', models.CharField(blank=True, max_length=16, null=True, verbose_name='系统版本')),
                ('cpu_count', models.IntegerField(blank=True, null=True, verbose_name='CPU个数')),
                ('cpu_physical_count', models.IntegerField(blank=True, null=True, verbose_name='CPU物理个数')),
                ('cpu_model', models.CharField(blank=True, max_length=128, null=True, verbose_name='CPU型号')),
                ('create_at', models.DateTimeField(auto_now_add=True)),
                ('last_online', models.DateTimeField(blank=True, null=True)),
                ('agent_address', models.CharField(default='', max_length=50, null=True, verbose_name='监控代理地址')),
                ('ssh_address', models.CharField(default='', max_length=50, null=True, verbose_name='SSH地址')),
                ('jmx_address', models.CharField(default='', max_length=50, null=True, verbose_name='JMX地址')),
                ('snmp_address', models.CharField(default='', max_length=50, null=True, verbose_name='SNMP地址')),
                ('config_updated', models.BooleanField(default=True)),
                ('asset', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='monitor_web.Asset')),
                ('data_collector', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='monitor_web.DataCollector', verbose_name='数据收集器')),
            ],
            options={
                'verbose_name_plural': '服务器表',
                'db_table': 'server',
            },
        ),
        migrations.CreateModel(
            name='ServerGroup',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=40, verbose_name='服务器组名')),
                ('desc', models.CharField(blank=True, max_length=512, null=True, verbose_name='描述')),
                ('alarm_type', models.IntegerField(choices=[(0, '不接收'), (1, '普通报警'), (2, '严重报警'), (3, '所有报警')], default=0, verbose_name='告警类型')),
            ],
            options={
                'verbose_name_plural': '服务器组表',
                'db_table': 'server_group',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, unique=True, verbose_name='标签')),
            ],
            options={
                'verbose_name_plural': '标签表',
                'db_table': 'tag',
            },
        ),
        migrations.CreateModel(
            name='Template',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(default='', max_length=40, verbose_name='模板名字')),
                ('monitor_set_id', models.ManyToManyField(db_table='r_template_set', to='monitor_web.MonitorSet')),
                ('server_group', models.ManyToManyField(db_table='r_template_server_group', to='monitor_web.ServerGroup')),
                ('server_id', models.ManyToManyField(db_table='r_template_server', to='monitor_web.Server')),
                ('template_id', models.ManyToManyField(db_table='r_template_template', to='monitor_web.Template')),
            ],
            options={
                'verbose_name_plural': '模板表',
                'db_table': 'template',
            },
        ),
        migrations.CreateModel(
            name='Trigger',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('expression', models.CharField(default='', max_length=256, verbose_name='触发器表达式')),
                ('name', models.CharField(default='', max_length=256, verbose_name='触发器名')),
                ('desc', models.CharField(default='', max_length=256, null=True, verbose_name='描述')),
                ('trigger_copy_from', models.IntegerField(default='0', editable=False, null=True, verbose_name='触发器复制自')),
                ('template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='t', to='monitor_web.Template', verbose_name='所属模板')),
            ],
            options={
                'verbose_name_plural': '触发器表',
                'db_table': 'trigger',
            },
        ),
        migrations.CreateModel(
            name='UserGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('desc', models.CharField(blank=True, default='', max_length=512)),
                ('group', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='auth.Group')),
                ('profile', models.ManyToManyField(blank=True, db_table='r_usergroup_profile', to='monitor_web.Profile')),
                ('server_group', models.ManyToManyField(blank=True, db_table='r_user_group_server_group', to='monitor_web.ServerGroup')),
            ],
            options={
                'verbose_name_plural': '用户组表',
                'db_table': 'user_group',
            },
        ),
        migrations.AddField(
            model_name='server',
            name='server_groups',
            field=models.ManyToManyField(db_table='r_server_server_group', to='monitor_web.ServerGroup'),
        ),
        migrations.AddField(
            model_name='server',
            name='templates',
            field=models.ManyToManyField(db_table='r_server_template', to='monitor_web.Template'),
        ),
        migrations.AddField(
            model_name='relationuseritem',
            name='template',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='monitor_web.Template'),
        ),
        migrations.AddField(
            model_name='relationuseritem',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='nic',
            name='server_obj',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='nic', to='monitor_web.Server'),
        ),
        migrations.AddIndex(
            model_name='monitoritem',
            index=models.Index(fields=['host_id'], name='item_host_id_d4c23a_idx'),
        ),
        migrations.AddIndex(
            model_name='monitoritem',
            index=models.Index(fields=['template_id'], name='item_templat_a9bc14_idx'),
        ),
        migrations.AddIndex(
            model_name='monitoritem',
            index=models.Index(fields=['item_copy_from'], name='item_item_co_79ba73_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='monitoritem',
            unique_together={('key', 'host_id')},
        ),
        migrations.AddField(
            model_name='memory',
            name='server_obj',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='memory', to='monitor_web.Server'),
        ),
        migrations.AddField(
            model_name='grafanadashboard',
            name='diagram',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='monitor_web.Diagram'),
        ),
        migrations.AddField(
            model_name='function',
            name='item',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='monitor_web.MonitorItem'),
        ),
        migrations.AddField(
            model_name='function',
            name='trigger',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='monitor_web.Trigger'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['target_id'], name='event_target__e5cac9_idx'),
        ),
        migrations.AddField(
            model_name='disk',
            name='server_obj',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='disk', to='monitor_web.Server'),
        ),
        migrations.AddField(
            model_name='diagramitem',
            name='diagram',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='monitor_web.Diagram'),
        ),
        migrations.AddField(
            model_name='diagramitem',
            name='item',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='monitor_web.MonitorItem'),
        ),
        migrations.AddField(
            model_name='diagram',
            name='template',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='d', to='monitor_web.Template', verbose_name='所属模板'),
        ),
        migrations.AddField(
            model_name='businessunit',
            name='contact',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='c', to='monitor_web.Profile', verbose_name='业务联系人'),
        ),
        migrations.AddField(
            model_name='businessunit',
            name='manager',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='m', to='monitor_web.Profile', verbose_name='系统管理员'),
        ),
        migrations.AddField(
            model_name='assetrecord',
            name='asset_obj',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ar', to='monitor_web.Asset'),
        ),
        migrations.AddField(
            model_name='assetrecord',
            name='creator',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='monitor_web.Profile'),
        ),
        migrations.AddField(
            model_name='asseterrorlog',
            name='asset_obj',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='monitor_web.Asset'),
        ),
        migrations.AddField(
            model_name='asset',
            name='business_unit',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='monitor_web.BusinessUnit', verbose_name='属于的业务线'),
        ),
        migrations.AddField(
            model_name='asset',
            name='idc',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='monitor_web.IDC', verbose_name='IDC机房'),
        ),
        migrations.AddField(
            model_name='asset',
            name='tag',
            field=models.ManyToManyField(db_table='r_asset_tag', to='monitor_web.Tag'),
        ),
        migrations.AddField(
            model_name='alert',
            name='monitor_item',
            field=models.ForeignKey(default='', editable=False, on_delete=django.db.models.deletion.CASCADE, to='monitor_web.MonitorItem'),
        ),
        migrations.AddField(
            model_name='alert',
            name='send_to',
            field=models.ForeignKey(default='', editable=False, on_delete=django.db.models.deletion.CASCADE, to='monitor_web.Profile'),
        ),
        migrations.AddIndex(
            model_name='trigger',
            index=models.Index(fields=['trigger_copy_from'], name='trigger_trigger_778b24_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='relationuseritem',
            unique_together={('user', 'item')},
        ),
        migrations.AddIndex(
            model_name='grafanadashboard',
            index=models.Index(fields=['device_id'], name='grafana_das_device__c2cf4c_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='grafanadashboard',
            unique_together={('device_id', 'device_type', 'diagram')},
        ),
        migrations.AlterUniqueTogether(
            name='function',
            unique_together={('item', 'trigger', 'name', 'parameter')},
        ),
    ]
